name: Organization Secret Verification

on:
  workflow_run:
    workflows: ["*"]
    types: [requested]
  push:
    paths:
      - '.github/workflows/**'
    branches:
      - '**'
  pull_request:
    paths:
      - '.github/workflows/**'

permissions:
  contents: read
  pull-requests: write  # Needed for commenting on PRs
  actions: read        # For analyzing workflows

jobs:
  verify-secrets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for workflow changes
        id: check-changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "Workflow run event detected, proceeding with secret verification"
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "pull_request" ]]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before || 'HEAD^' }} ${{ github.event.after || 'HEAD' }} | grep -E "^\.github/workflows/.*\.ya?ml$" || true)
            if [[ -n "$CHANGED_FILES" ]]; then
              echo "Workflow file changes detected in:"
              echo "$CHANGED_FILES"
              echo "changes_detected=true" >> $GITHUB_OUTPUT
              echo "changed_files<<EOF" >> $GITHUB_OUTPUT
              echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "No workflow file changes detected"
              echo "changes_detected=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Set up Python
        if: steps.check-changes.outputs.changes_detected == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        if: steps.check-changes.outputs.changes_detected == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests
      
      - name: Extract secrets from workflows
        if: steps.check-changes.outputs.changes_detected == 'true'
        id: extract-secrets
        run: |
          cat > extract_secrets.py << 'EOF'
          import os
          import re
          import sys
          import yaml
          import json
          import requests
          from pathlib import Path
          
          def extract_secrets_from_workflow(file_path):
              """Extract all secrets referenced in a workflow file."""
              try:
                  with open(file_path, 'r') as f:
                      content = f.read()
                  
                  # Find all references to secrets using regex
                  secret_pattern = r'\$\{\{\s*secrets\.([A-Za-z0-9_]+)\s*\}\}'
                  referenced_secrets = re.findall(secret_pattern, content)
                  return set(referenced_secrets)
              except Exception as e:
                  print(f"Error processing {file_path}: {e}")
                  return set()
          
          def get_repository_secrets(token, owner, repo):
              """Get repository secrets using GitHub API."""
              headers = {
                  "Authorization": f"token {token}",
                  "Accept": "application/vnd.github.v3+json"
              }
              
              try:
                  # We can only check if secrets exist, not get their values
                  url = f"https://api.github.com/repos/{owner}/{repo}/actions/secrets"
                  response = requests.get(url, headers=headers)
                  if response.status_code == 200:
                      data = response.json()
                      return {secret["name"] for secret in data.get("secrets", [])}
                  else:
                      print(f"Failed to get repository secrets: {response.status_code}")
                      print(f"Response: {response.text}")
                      return set()
              except Exception as e:
                  print(f"Error fetching repository secrets: {e}")
                  return set()
          
          def get_organization_secrets(token, org):
              """Get organization secrets using GitHub API."""
              headers = {
                  "Authorization": f"token {token}",
                  "Accept": "application/vnd.github.v3+json"
              }
              
              try:
                  url = f"https://api.github.com/orgs/{org}/actions/secrets"
                  response = requests.get(url, headers=headers)
                  if response.status_code == 200:
                      data = response.json()
                      return {secret["name"] for secret in data.get("secrets", [])}
                  else:
                      print(f"Failed to get organization secrets: {response.status_code}")
                      return set()
              except Exception as e:
                  print(f"Error fetching organization secrets: {e}")
                  return set()
          
          def get_environment_secrets(token, owner, repo, environment):
              """Get environment secrets using GitHub API."""
              headers = {
                  "Authorization": f"token {token}",
                  "Accept": "application/vnd.github.v3+json"
              }
              
              try:
                  url = f"https://api.github.com/repos/{owner}/{repo}/environments/{environment}/secrets"
                  response = requests.get(url, headers=headers)
                  if response.status_code == 200:
                      data = response.json()
                      return {secret["name"] for secret in data.get("secrets", [])}
                  else:
                      # Don't report errors for environments - they might not exist
                      return set()
              except Exception:
                  return set()
          
          def extract_environments_from_workflow(file_path):
              """Extract environment names from workflow file."""
              try:
                  with open(file_path, 'r') as f:
                      workflow = yaml.safe_load(f)
                  
                  environments = set()
                  if workflow and 'jobs' in workflow:
                      for job_name, job_config in workflow['jobs'].items():
                          if 'environment' in job_config:
                              env = job_config['environment']
                              if isinstance(env, str):
                                  environments.add(env)
                              elif isinstance(env, dict) and 'name' in env:
                                  environments.add(env['name'])
                  return environments
              except Exception as e:
                  print(f"Error extracting environments from {file_path}: {e}")
                  return set()
          
          def main():
              # Get repo info from environment
              github_token = os.environ.get('GITHUB_TOKEN')
              repository = os.environ.get('GITHUB_REPOSITORY')
              
              if not repository or not github_token:
                  print("Missing required environment variables")
                  sys.exit(1)
                  
              owner, repo = repository.split('/')
              
              # Get changed workflow files
              changed_files = os.environ.get('CHANGED_FILES', '').splitlines()
              if not changed_files:
                  print("No changed workflow files specified")
                  sys.exit(1)
                  
              # Extract secrets from changed workflow files
              all_referenced_secrets = set()
              all_environments = set()
              
              for file_path in changed_files:
                  if os.path.exists(file_path):
                      secrets = extract_secrets_from_workflow(file_path)
                      environments = extract_environments_from_workflow(file_path)
                      
                      all_referenced_secrets.update(secrets)
                      all_environments.update(environments)
                      
                      print(f"Processed {file_path}: Found {len(secrets)} secret(s)")
                      if environments:
                          print(f"  Environments: {', '.join(environments)}")
              
              # Get available secrets
              available_secrets = set(['GITHUB_TOKEN'])  # Built-in token always available
              
              # Get repository secrets
              repo_secrets = get_repository_secrets(github_token, owner, repo)
              available_secrets.update(repo_secrets)
              print(f"Found {len(repo_secrets)} repository secrets")
              
              # Get organization secrets
              org_secrets = get_organization_secrets(github_token, owner)
              available_secrets.update(org_secrets)
              print(f"Found {len(org_secrets)} organization secrets")
              
              # Get environment secrets
              for env in all_environments:
                  env_secrets = get_environment_secrets(github_token, owner, repo, env)
                  available_secrets.update(env_secrets)
                  print(f"Found {len(env_secrets)} secrets for environment '{env}'")
              
              # Find missing secrets
              missing_secrets = all_referenced_secrets - available_secrets
              
              # Generate output
              results = {
                  "referenced_secrets": list(all_referenced_secrets),
                  "available_secrets": list(available_secrets),
                  "missing_secrets": list(missing_secrets),
                  "has_missing_secrets": len(missing_secrets) > 0
              }
              
              # Write to output file
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"referenced_secrets={','.join(sorted(all_referenced_secrets))}\n")
                  f.write(f"missing_secrets={','.join(sorted(missing_secrets))}\n")
                  f.write(f"has_missing_secrets={len(missing_secrets) > 0}\n")
                  
                  # Special handling for JSON output (multiline)
                  json_data = json.dumps(results)
                  f.write("json_results<<EOF\n")
                  f.write(json_data)
                  f.write("\nEOF\n")
              
              # Print summary
              if missing_secrets:
                  print("\n⚠️ WARNING: The following secrets may not be available:")
                  for secret in sorted(missing_secrets):
                      print(f"  - {secret}")
              else:
                  print("\n✅ All referenced secrets appear to be available!")
          
          if __name__ == "__main__":
              main()
          EOF
          
          python extract_secrets.py
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          CHANGED_FILES: ${{ steps.check-changes.outputs.changed_files }}
      
      - name: Add PR comment for missing secrets
        if: github.event_name == 'pull_request' && steps.extract-secrets.outputs.has_missing_secrets == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const results = JSON.parse(process.env.JSON_RESULTS);
            
            const commentBody = `## 🚨 Missing Secrets Detected
            
            This PR modifies GitHub workflow files that reference secrets which don't appear to be available:
            
            ${results.missing_secrets.map(s => `- \`${s}\``).join('\n')}
            
            ### All Referenced Secrets
            ${results.referenced_secrets.map(s => `- \`${s}\``).join('\n')}
            
            Please ensure all required secrets are properly configured in:
            - Repository secrets
            - Organization secrets
            - Environment secrets (if using environments)
            
            <details>
            <summary>Why am I seeing this?</summary>
            
            This automated check helps prevent workflow failures due to missing secrets.
            Missing secrets will cause workflow runs to fail when they're executed.
            </details>`;
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Missing Secrets Detected');
            });
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody,
              });
            }
        env:
          JSON_RESULTS: ${{ steps.extract-secrets.outputs.json_results }}
      
      - name: Add PR comment for successful verification
        if: github.event_name == 'pull_request' && steps.extract-secrets.outputs.has_missing_secrets != 'true' && steps.extract-secrets.outputs.referenced_secrets != ''
        uses: actions/github-script@v6
        with:
          script: |
            const referencedSecrets = process.env.REFERENCED_SECRETS.split(',');
            
            const commentBody = `## ✅ Secret Verification Successful
            
            This PR modifies GitHub workflow files that reference these secrets:
            
            ${referencedSecrets.map(s => `- \`${s}\``).join('\n')}
            
            All referenced secrets appear to be properly configured.
            
            <details>
            <summary>Why am I seeing this?</summary>
            
            This automated check helps prevent workflow failures due to missing secrets.
            </details>`;
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && (
                comment.body.includes('Secret Verification Successful') ||
                comment.body.includes('Missing Secrets Detected')
              );
            });
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody,
              });
            }
        env:
          REFERENCED_SECRETS: ${{ steps.extract-secrets.outputs.referenced_secrets }}